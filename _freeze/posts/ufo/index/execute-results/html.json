{
  "hash": "f4035d20735a4a920d56225e35a8229c",
  "result": {
    "markdown": "---\ntitle: \"Who is the leading US state in UFO reports? probably not what you thought\"\ndescription: \"Visualizing UFO reports per state capita\"\nauthor: \"Tomer Zipori\"\ndate: 2023-05-06\ncategories: [code, visualization, ggplot2]\nimage: \"ufo1.png\"\nexecute: \n  warning: false\n  message: false\nformat:\n  html:\n    theme: darkly\n    toc: true\n    toc-depth: 2\n    toc-location: right\neditor: visual\n---\n\n\n# Background\nSome time ago, when the fall semester began I've enrolled on a course called *Data science lab* as part of the 'Data Science for the Social Sciences' program. One of the assignments was to make some `tidyverse` contribution and to present it in class. Although this is not what I've presented in class (see the post about that one), this was made shortly after and I think it came out quite nice :)\n\n# The Data\n##### From the Github [repo](https://github.com/tomerzipori/tidytuesday/tree/master/data/2019/2019-06-25):\n*This data includes >80,000 recorded UFO \"sightings\" around the world, including the UFO shape,* *lat/long and state/country of where the sighting occurred, duration of the \"event\" and the* *data_time when it occurred.  *\n\n*Data comes originally from [NUFORC](http://www.nuforc.org/), was cleaned and uploaded to Github by [Sigmond Axel](https://github.com/planetsig/ufo-reports), and some exploratory plots were created by [Jonathan Bouchet](https://www.kaggle.com/jonathanbouchet/e-t-phone-home-but-mostly-after-8-00pm) a few years back.*\n\nLet's start!\n\n# Setup\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)    # for data wrangling and pre-processing\nlibrary(readxl)\nlibrary(tidytuesdayR) # for easy data loading\nlibrary(maps)         # map data\nlibrary(lubridate)    # makes dealing with date format much easier\nlibrary(jpeg)\nlibrary(ggimage)\nlibrary(showtext)     # fonts\n```\n:::\n\n\n# Loading data\n## Initial pre-processing\n\n::: {.cell}\n\n```{.r .cell-code}\nufo_sightings <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-06-25/ufo_sightings.csv\")\n\nusa <- map_data(\"state\") # US map\n\nstate_codes <- read_csv(\"state_code.csv\") %>% # converting from state name to 2-letter code and back\n  select(state, code) %>%\n  mutate(state = tolower(state), code = tolower(code))\n\nuspop <- read_excel(\"uspop.xlsx\", col_names = c(\"region\", \"pop_2010\", \"pop_2011\", \"pop_2012\", \"pop_2013\", \"pop_2014\")) %>% # info about state population\n  mutate(region = tolower(str_remove(region, \".\"))) %>%\n  rowwise() %>%\n  mutate(mean_pop = mean(c(pop_2010, pop_2011, pop_2012, pop_2013, pop_2014))) %>%\n  ungroup() %>%\n  select(region, mean_pop)\n```\n:::\n\n\n## Glimpsing at the data\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(ufo_sightings)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 80,332\nColumns: 11\n$ date_time                  <chr> \"10/10/1949 20:30\", \"10/10/1949 21:00\", \"10…\n$ city_area                  <chr> \"san marcos\", \"lackland afb\", \"chester (uk/…\n$ state                      <chr> \"tx\", \"tx\", NA, \"tx\", \"hi\", \"tn\", NA, \"ct\",…\n$ country                    <chr> \"us\", NA, \"gb\", \"us\", \"us\", \"us\", \"gb\", \"us…\n$ ufo_shape                  <chr> \"cylinder\", \"light\", \"circle\", \"circle\", \"l…\n$ encounter_length           <dbl> 2700, 7200, 20, 20, 900, 300, 180, 1200, 18…\n$ described_encounter_length <chr> \"45 minutes\", \"1-2 hrs\", \"20 seconds\", \"1/2…\n$ description                <chr> \"This event took place in early fall around…\n$ date_documented            <chr> \"4/27/2004\", \"12/16/2005\", \"1/21/2008\", \"1/…\n$ latitude                   <dbl> 29.88306, 29.38421, 53.20000, 28.97833, 21.…\n$ longitude                  <dbl> -97.941111, -98.581082, -2.916667, -96.6458…\n```\n:::\n:::\n\n\n\nUs population info taken from the [United States Census Bureau](https://www.census.gov/data/datasets/time-series/demo/popest/2010s-state-total.html#par_textimage_1873399417).\n\n## Defining functions\nSome helper function will help us later, mainly to work with dates.  \n`convert_to_date` takes a vector of character formatted dates and converts it to lubridate's *date* format.  `floor_decade` takes a vector of dates and converts it to a vector of decades.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nconvert_to_date <- function(x) { \n  sub_string <- str_sub(x, 1, 10)\n  d <- mdy(sub_string)\n  return(as.numeric(d))\n}\nfloor_decade <- function(x){\n  return(lubridate::year(x) - lubridate::year(x) %% 10)\n  }\n```\n:::\n\n\n### Converting the dates\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_4074a8b4322bec1b86af4d844a384ff6'}\n\n```{.r .cell-code}\nufo_sightings <- ufo_sightings %>%\n  mutate(date = as_date(purrr::map_dbl(date_time, ~convert_to_date(.)))) # Convert to 'Date' format. Run only once, its slow af\n```\n:::\n\n\n## Globals\nHere I'm loading some images and fonts that will be of use later to beautify the plot.\n\n::: {.cell}\n\n```{.r .cell-code}\nnightsky_img <- \"nightsky2.jpg\"\n\n#font_files() %>% tibble() %>% filter(str_detect(family, \"Showcard Gothic\"))\nfont_add(family = \"Showcard Gothic\", regular = \"SHOWG.TTF\")\nshowtext_auto()\n```\n:::\n\n\n## Data pre-processing\nPreparing the data for plotting. I did several things in here:\n      1. Leaving only reports from the US.\\\n      2. Leaving only reports for *continental* US.\\\n      3. Selecting the relevant variables.\\\n      4. Calculating decades.\n\n::: {.cell}\n\n```{.r .cell-code}\nufo <- ufo_sightings %>%\n  filter(country == \"us\") %>% # Leaving only sightings in US\n  filter(!(state %in% c(\"ak\", \"pr\", \"hi\"))) %>% # Only mainland US\n  select(date, code = state, description, encounter_length, latitude, longitude) %>%\n  left_join(state_codes, by = \"code\") %>%\n  mutate(decade = as.factor(purrr::map_dbl(date, ~floor_decade(.)))) %>% # Create decade variable\n  drop_na(decade)\n```\n:::\n\n\nAfter some experimenting I've decided to make a heat map to visualize the number of UFO reports per state. But first, some more data processing. I first counted the number of cases per state (*by_state*), and them combined it with the USA map data frame (*by_state2*).\n\n::: {.cell}\n\n```{.r .cell-code}\nby_state <- ufo %>%\n    group_by(state, decade, .drop = F) %>%\n    summarise(cases = n(),\n              .groups = \"drop\")\n  \nby_state2 <- left_join(usa, by_state, by = c(\"region\" = \"state\"), multiple = \"all\") %>%\n  filter(decade %in% c(2000, 2010)) %>%\n    left_join(uspop, by = \"region\")\n```\n:::\n\n\nNow I need to summarize the number of cases per state.\n\n::: {.cell}\n\n```{.r .cell-code}\ncases_per_state <- by_state2 %>%\n  group_by(region) %>%\n  summarise(cases = sum(cases), .groups = \"drop\")\n```\n:::\n\n\nAnd finally merge it back together with the geographic data.\n\n::: {.cell}\n\n```{.r .cell-code}\nby_state2 <- left_join(by_state2, select(cases_per_state, region, cases_total = cases), by = \"region\")\n```\n:::\n\n\n## Heatmap 1\nAnd now for the heat map... *drum roll*\n\n::: {.cell}\n\n```{.r .cell-code}\nheatmap <- ggplot(by_state2, aes(x = long, y = lat, fill = cases_total, group = group)) +\n  geom_polygon(color = \"black\", show.legend = T) +\n  scale_fill_gradient(low = \"#ffae00\", high = \"#d90000\", limits = c(0, 2864832), breaks = c(0, 2850000)) +\n  coord_fixed(1.3, clip = \"off\") +\n  theme_minimal()\n\nheatmap\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nLooking at these results, I thought that of course California has the most reports, it has the most people!  \nA *per capita* measure will probably be more informative.\n\nCalculating reports per capita.\n\n::: {.cell}\n\n```{.r .cell-code}\ncases_per_capita <- by_state2 %>%\n  group_by(region) %>%\n  summarise(cases = sum(cases), .groups = \"drop\") %>%\n  left_join(uspop, by = \"region\") %>%\n  mutate(cases_per_capita = cases/mean_pop)\n```\n:::\n\n\nMerging again with the geographical data.\n\n::: {.cell}\n\n```{.r .cell-code}\nby_state2 <- left_join(by_state2, select(cases_per_capita, region, cases_per_capita, cases_total = cases), by = \"region\")\n```\n:::\n\n\n## Heatmap 2\n\n::: {.cell}\n\n```{.r .cell-code}\nheatmap2 <- ggplot(by_state2, aes(x = long, y = lat, fill = cases_per_capita, group = group)) +\n  geom_polygon(color = \"black\", show.legend = T) +\n  scale_fill_gradient(low = \"#ffae00\", high = \"#d90000\", limits = c(0, 0.2), breaks = seq(0, 0.2, length.out = 6)) +\n  coord_fixed(1.3, clip = \"off\") +\n  theme_minimal()\n\nheatmap2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\nNice!\n\n## Heatmap3\nLet's add some aesthetics because why not (I've only spend 6 hours on Google researching color theory and ggplot2's internal logic). Unfold the code chunk if you are interested in seeing the monstrosity.\n\n::: {.cell fig.dpi='96'}\n\n```{.r .cell-code  code-fold=\"true\"}\nheatmap3 <- ggplot(by_state2, aes(x = long, y = lat, fill = cases_per_capita, group = group)) +\n  geom_polygon(color = \"#00670c\", show.legend = T) +\n  scale_fill_gradient(low = \"black\", high = \"#5dff00\", limits = c(0, 0.2), breaks = seq(0, 0.2, length.out = 6), guide = guide_colorbar(\"Number of reported cases per capita\", \n                                                                               title.position = \"top\",\n                                                                               title.theme = element_text(color = \"#5dff00\", family = \"serif\"),\n                                                                               title.hjust = 0.5,\n                                                                               barwidth = 30,\n                                                                               ticks.colour = NA)) +\n  labs(title = \"15 years of UFO sightings in the US between 2000 and 2014\",\n       caption = \"Tomer Zipori | #TidyTuesday | Source: National UFO Reporting Center\") +\n  coord_fixed(1.3, clip = \"off\") +\n  theme_minimal() +\n  annotate(\"label\", x = -130, y = 45.4, label = \"Washington is spooky!\\n # of cases: 1,228,975\\n Cases per capita: 0.18\",\n           color = \"#5dff00\", fill = \"black\", family = \"serif\", fontface = \"bold\") +\n  geom_curve(aes(x = -127.5, y = 46.4, xend = -124.48, yend = 47.4), color = \"#5dff00\", linewidth = 1, curvature = -0.35,\n             arrow = arrow(type = \"closed\", length = unit(0.02, \"npc\"))) +\n  annotate(\"label\", x = -124, y = 30.4, label = \"Utah has the lowest rate in the US\\n # of cases: 22,715\\n Cases per capita: 0.0079\",\n           color = \"#5dff00\", fill = \"black\", family = \"serif\", fontface = \"bold\") +\n  geom_curve(aes(x = -119.4, y = 31.4, xend = -111.5, yend = 39), color = \"#5dff00\", linewidth = 1, curvature = 0.3,\n             arrow = arrow(type = \"closed\", length = unit(0.02, \"npc\"))) +\n  theme(plot.title = element_text(size = 24, vjust = -4, hjust = 0.5, color = \"#5dff00\", family = \"Showcard Gothic\"),\n        plot.caption = element_text(color = \"#5dff00\", hjust = 1.05, family = \"serif\", size = 9),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        panel.grid = element_blank(),\n        legend.position = \"bottom\", legend.box = \"horizontal\", legend.text = element_text(color = \"#5dff00\", family = \"mono\", size = 14))\nheatmap3 <- ggbackground(heatmap3, nightsky_img)\n```\n:::\n\n![](heatmap3.png){fig-align=\"center\"}\n\n\n# Conclusion\nWashington is spooky! I really don't know why Washington is leading in this measure. Like most people I've expected to find Nevada or Utah (which is last!) in the first place. Having said that, UFO stands for \"**Unidentified** foreign object\", maybe the people of Nevada know what they are seeing in the sky lol.\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}