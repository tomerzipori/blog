{
  "hash": "04348703e4733fde3289b7a32227a1e0",
  "result": {
    "markdown": "---\ntitle: \"What makes FIFA 23 players good?\"\ndescription: \"Experimentation with Elastic -net regression and decision tree boosting.\"\nauthor: \"Tomer Zipori\"\ndate: 2023-05-06\ncategories: [code, analysis, Machine Learning]\nimage: \"reece.jpg\"\nexecute: \n  warning: false\n  message: false\n  cache: true\nformat:\n  html:\n    theme: cosmo\n    backgroundcolor: \"#e3e3e3\"\n    toc: true\n    toc-depth: 2\n    toc-location: right\neditor: visual\n---\n\n\n# Background and analysis plan\n\nThe current [Data](https://www.kaggle.com/datasets/babatundezenith/fifa-archive) is an upload to *Kaggle* by Babatunde Zenith, and it includes information about players in the popular *FIFA 23* video game. Information includes: name, age, nationality, position, various football ratings and contract deals.\n\nThe current notebook is an attempt at:\\\n      1. Accurately and efficiently predicting player's overall rating.\\\n      2. Identifying important variables (features) for this prediction.\n\nBoth goals will be achieved using two methods: Elastic-net regression and Decision tree Boosting. Data pre-processing will be done with `tidyverse`, Model fitting and evaluation will be done with the `caret` and `gbm` packages.\n\n# Setup\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-1_2f4bc1ff9e949cc7f02f5459a68233b3'}\n\n```{.r .cell-code}\nlibrary(tidyverse) # For data-wrangling, pre-processing and plotting with ggplot2\nlibrary(caret)     # For model training, tuning and evaluating\nlibrary(gbm)       # For fitting Boost models\nlibrary(glue)      # Helper package for nice-looking output\n```\n:::\n\n\n# Loading data\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-2_1005f1639872a54a1205e089611b747e'}\n\n```{.r .cell-code}\nplayers <- read_csv(\"Fifa_23_Players_Data.csv\")\nglimpse(players)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 17,529\nColumns: 89\n$ `Known As`                    <chr> \"L. Messi\", \"K. Benzema\", \"R. Lewandowsk…\n$ `Full Name`                   <chr> \"Lionel Messi\", \"Karim Benzema\", \"Robert…\n$ Overall                       <dbl> 91, 91, 91, 91, 91, 90, 90, 90, 90, 90, …\n$ Potential                     <dbl> 91, 91, 91, 91, 95, 90, 91, 90, 90, 90, …\n$ `Value(in Euro)`              <dbl> 54000000, 64000000, 84000000, 107500000,…\n$ `Positions Played`            <chr> \"RW\", \"CF,ST\", \"ST\", \"CM,CAM\", \"ST,LW\", …\n$ `Best Position`               <chr> \"CAM\", \"CF\", \"ST\", \"CM\", \"ST\", \"RW\", \"GK…\n$ Nationality                   <chr> \"Argentina\", \"France\", \"Poland\", \"Belgiu…\n$ `Image Link`                  <chr> \"https://cdn.sofifa.net/players/158/023/…\n$ Age                           <dbl> 35, 34, 33, 31, 23, 30, 30, 36, 37, 30, …\n$ `Height(in cm)`               <dbl> 169, 185, 185, 181, 182, 175, 199, 193, …\n$ `Weight(in kg)`               <dbl> 67, 81, 81, 70, 73, 71, 96, 93, 83, 92, …\n$ TotalStats                    <dbl> 2190, 2147, 2205, 2303, 2177, 2226, 1334…\n$ BaseStats                     <dbl> 452, 455, 458, 483, 470, 471, 473, 501, …\n$ `Club Name`                   <chr> \"Paris Saint-Germain\", \"Real Madrid CF\",…\n$ `Wage(in Euro)`               <dbl> 195000, 450000, 420000, 350000, 230000, …\n$ `Release Clause`              <dbl> 99900000, 131199999, 172200000, 19890000…\n$ `Club Position`               <chr> \"RW\", \"CF\", \"ST\", \"CM\", \"ST\", \"RW\", \"GK\"…\n$ `Contract Until`              <chr> \"2023\", \"2023\", \"2025\", \"2025\", \"2024\", …\n$ `Club Jersey Number`          <chr> \"30\", \"9\", \"9\", \"17\", \"7\", \"11\", \"1\", \"1…\n$ `Joined On`                   <dbl> 2021, 2009, 2022, 2015, 2018, 2017, 2018…\n$ `On Loan`                     <chr> \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", …\n$ `Preferred Foot`              <chr> \"Left\", \"Right\", \"Right\", \"Right\", \"Righ…\n$ `Weak Foot Rating`            <dbl> 4, 4, 4, 5, 4, 3, 3, 4, 4, 3, 5, 5, 5, 3…\n$ `Skill Moves`                 <dbl> 4, 4, 4, 4, 5, 4, 1, 1, 5, 2, 3, 5, 4, 2…\n$ `International Reputation`    <dbl> 5, 4, 5, 4, 4, 4, 4, 5, 5, 4, 4, 5, 4, 3…\n$ `National Team Name`          <chr> \"Argentina\", \"France\", \"Poland\", \"Belgiu…\n$ `National Team Image Link`    <chr> \"https://cdn.sofifa.net/flags/ar.png\", \"…\n$ `National Team Position`      <chr> \"RW\", \"ST\", \"ST\", \"RF\", \"ST\", \"-\", \"GK\",…\n$ `National Team Jersey Number` <chr> \"10\", \"19\", \"9\", \"7\", \"10\", \"-\", \"1\", \"1…\n$ `Attacking Work Rate`         <chr> \"Low\", \"Medium\", \"High\", \"High\", \"High\",…\n$ `Defensive Work Rate`         <chr> \"Low\", \"Medium\", \"Medium\", \"High\", \"Low\"…\n$ `Pace Total`                  <dbl> 81, 80, 75, 74, 97, 90, 84, 87, 81, 81, …\n$ `Shooting Total`              <dbl> 89, 88, 91, 88, 89, 89, 89, 88, 92, 60, …\n$ `Passing Total`               <dbl> 90, 83, 79, 93, 80, 82, 75, 91, 78, 71, …\n$ `Dribbling Total`             <dbl> 94, 87, 86, 87, 92, 90, 90, 88, 85, 72, …\n$ `Defending Total`             <dbl> 34, 39, 44, 64, 36, 45, 46, 56, 34, 91, …\n$ `Physicality Total`           <dbl> 64, 78, 83, 77, 76, 75, 89, 91, 75, 86, …\n$ Crossing                      <dbl> 84, 75, 71, 94, 78, 80, 14, 15, 80, 53, …\n$ Finishing                     <dbl> 90, 92, 94, 85, 93, 93, 14, 13, 93, 52, …\n$ `Heading Accuracy`            <dbl> 70, 90, 91, 55, 72, 59, 13, 25, 90, 87, …\n$ `Short Passing`               <dbl> 91, 89, 84, 93, 85, 84, 33, 60, 80, 79, …\n$ Volleys                       <dbl> 88, 88, 89, 83, 83, 84, 12, 11, 86, 45, …\n$ Dribbling                     <dbl> 95, 87, 85, 88, 93, 90, 13, 30, 85, 70, …\n$ Curve                         <dbl> 93, 82, 79, 89, 80, 84, 19, 14, 81, 60, …\n$ `Freekick Accuracy`           <dbl> 93, 73, 85, 83, 69, 69, 20, 11, 79, 70, …\n$ LongPassing                   <dbl> 90, 76, 70, 93, 71, 77, 35, 68, 75, 86, …\n$ BallControl                   <dbl> 93, 91, 89, 90, 91, 88, 23, 46, 88, 76, …\n$ Acceleration                  <dbl> 87, 79, 76, 76, 97, 89, 42, 54, 79, 68, …\n$ `Sprint Speed`                <dbl> 76, 80, 75, 73, 97, 91, 52, 60, 83, 91, …\n$ Agility                       <dbl> 91, 78, 77, 76, 93, 90, 63, 51, 77, 61, …\n$ Reactions                     <dbl> 92, 92, 93, 91, 93, 93, 84, 87, 94, 89, …\n$ Balance                       <dbl> 95, 72, 82, 78, 81, 91, 45, 35, 67, 53, …\n$ `Shot Power`                  <dbl> 86, 87, 91, 92, 88, 83, 56, 68, 93, 81, …\n$ Jumping                       <dbl> 68, 79, 85, 63, 77, 69, 68, 77, 95, 88, …\n$ Stamina                       <dbl> 70, 82, 76, 88, 87, 87, 38, 43, 76, 74, …\n$ Strength                      <dbl> 68, 82, 87, 74, 76, 75, 70, 80, 77, 93, …\n$ `Long Shots`                  <dbl> 91, 80, 84, 91, 82, 85, 17, 16, 90, 64, …\n$ Aggression                    <dbl> 44, 63, 81, 75, 64, 63, 23, 29, 63, 85, …\n$ Interceptions                 <dbl> 40, 39, 49, 66, 38, 55, 15, 30, 29, 90, …\n$ Positioning                   <dbl> 93, 92, 94, 88, 92, 92, 13, 12, 95, 47, …\n$ Vision                        <dbl> 94, 89, 81, 94, 83, 85, 44, 70, 76, 65, …\n$ Penalties                     <dbl> 75, 84, 90, 83, 80, 86, 27, 47, 90, 62, …\n$ Composure                     <dbl> 96, 90, 88, 89, 88, 92, 66, 70, 95, 90, …\n$ Marking                       <dbl> 20, 43, 35, 68, 26, 38, 20, 17, 24, 92, …\n$ `Standing Tackle`             <dbl> 35, 24, 42, 65, 34, 43, 18, 10, 32, 92, …\n$ `Sliding Tackle`              <dbl> 24, 18, 19, 53, 32, 41, 16, 11, 24, 86, …\n$ `Goalkeeper Diving`           <dbl> 6, 13, 15, 15, 13, 14, 84, 87, 7, 13, 8,…\n$ `Goalkeeper Handling`         <dbl> 11, 11, 6, 13, 5, 14, 89, 88, 11, 10, 10…\n$ GoalkeeperKicking             <dbl> 15, 5, 12, 5, 7, 9, 75, 91, 15, 13, 11, …\n$ `Goalkeeper Positioning`      <dbl> 14, 5, 8, 10, 11, 11, 89, 91, 14, 11, 14…\n$ `Goalkeeper Reflexes`         <dbl> 8, 7, 10, 13, 6, 14, 90, 88, 11, 11, 11,…\n$ `ST Rating`                   <dbl> 90, 91, 91, 86, 92, 89, 34, 43, 90, 74, …\n$ `LW Rating`                   <dbl> 90, 87, 85, 88, 90, 88, 29, 40, 86, 68, …\n$ `LF Rating`                   <dbl> 91, 89, 88, 87, 90, 88, 31, 43, 88, 70, …\n$ `CF Rating`                   <dbl> 91, 89, 88, 87, 90, 88, 31, 43, 88, 70, …\n$ `RF Rating`                   <dbl> 91, 89, 88, 87, 90, 88, 31, 43, 88, 70, …\n$ `RW Rating`                   <dbl> 90, 87, 85, 88, 90, 88, 29, 40, 86, 68, …\n$ `CAM Rating`                  <dbl> 91, 91, 88, 91, 92, 90, 35, 50, 88, 73, …\n$ `LM Rating`                   <dbl> 91, 89, 86, 91, 92, 90, 34, 47, 87, 73, …\n$ `CM Rating`                   <dbl> 88, 84, 83, 91, 84, 85, 35, 53, 81, 79, …\n$ `RM Rating`                   <dbl> 91, 89, 86, 91, 92, 90, 34, 47, 87, 73, …\n$ `LWB Rating`                  <dbl> 67, 67, 67, 82, 70, 74, 32, 39, 65, 83, …\n$ `CDM Rating`                  <dbl> 66, 67, 69, 82, 66, 71, 34, 46, 62, 88, …\n$ `RWB Rating`                  <dbl> 67, 67, 67, 82, 70, 74, 32, 39, 65, 83, …\n$ `LB Rating`                   <dbl> 62, 63, 64, 78, 66, 70, 32, 38, 61, 85, …\n$ `CB Rating`                   <dbl> 53, 58, 63, 72, 57, 61, 32, 37, 56, 90, …\n$ `RB Rating`                   <dbl> 62, 63, 64, 78, 66, 70, 32, 38, 61, 85, …\n$ `GK Rating`                   <dbl> 22, 21, 22, 24, 21, 25, 90, 90, 23, 23, …\n```\n:::\n:::\n\n\nQuite a lot of features. Most of them are numeric which is good.\n\n# Pre-processing\n\n## Re-naming columns\n\nReplacing spaces with underscores for ease.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-3_9da74e594685cb933e9674368c3f5c0b'}\n\n```{.r .cell-code}\nnames(players) <- str_replace_all(names(players), pattern = \" \", replacement = \"_\")\n```\n:::\n\n\n## non-numeric variables\n\nFirst we'll look at potential garbage variables.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-4_40ee6c9c9bca23461333c04a1fb577e5'}\n\n```{.r .cell-code}\nnames(select(players, where(is.character)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Known_As\"                    \"Full_Name\"                  \n [3] \"Positions_Played\"            \"Best_Position\"              \n [5] \"Nationality\"                 \"Image_Link\"                 \n [7] \"Club_Name\"                   \"Club_Position\"              \n [9] \"Contract_Until\"              \"Club_Jersey_Number\"         \n[11] \"On_Loan\"                     \"Preferred_Foot\"             \n[13] \"National_Team_Name\"          \"National_Team_Image_Link\"   \n[15] \"National_Team_Position\"      \"National_Team_Jersey_Number\"\n[17] \"Attacking_Work_Rate\"         \"Defensive_Work_Rate\"        \n```\n:::\n:::\n\n\nAlmost all garbage data. Since I've noted that *Work Rate* variables are ordered (low-medium-high) We'll re-code them:\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-5_990faa1ce881b9d171ffd8df209dd04e'}\n\n```{.r .cell-code}\nplayers <- players %>%\n  mutate(Attacking_Work_Rate = case_when(Attacking_Work_Rate == \"Low\" ~ 1,\n                                         Attacking_Work_Rate == \"Medium\" ~ 2,\n                                         Attacking_Work_Rate == \"High\" ~ 3),\n         Defensive_Work_Rate = case_when(Defensive_Work_Rate == \"Low\" ~ 1,\n                                         Defensive_Work_Rate == \"Medium\" ~ 2,\n                                         Defensive_Work_Rate == \"High\" ~ 3)) %>%\n  select(-Known_As, -Full_Name, -Positions_Played, -Nationality, -Image_Link, -Club_Name, -Contract_Until, -Club_Jersey_Number, -National_Team_Name, -National_Team_Image_Link, -National_Team_Jersey_Number, -On_Loan) %>% # getting rid of garbage variables\n  mutate(across(where(is.character), ~na_if(., \"-\"))) # replacing all \"-\" with NA\n```\n:::\n\n\n## Searching for variables with large number of NA's\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-6_10ad352b052d997a53de069e25c0ba9f'}\n\n```{.r .cell-code}\ncolSums(is.na(players))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 Overall                Potential           Value(in_Euro) \n                       0                        0                        0 \n           Best_Position                      Age            Height(in_cm) \n                       0                        0                        0 \n           Weight(in_kg)               TotalStats                BaseStats \n                       0                        0                        0 \n           Wage(in_Euro)           Release_Clause            Club_Position \n                       0                        0                       86 \n               Joined_On           Preferred_Foot         Weak_Foot_Rating \n                       0                        0                        0 \n             Skill_Moves International_Reputation   National_Team_Position \n                       0                        0                    16746 \n     Attacking_Work_Rate      Defensive_Work_Rate               Pace_Total \n                       0                        0                        0 \n          Shooting_Total            Passing_Total          Dribbling_Total \n                       0                        0                        0 \n         Defending_Total        Physicality_Total                 Crossing \n                       0                        0                        0 \n               Finishing         Heading_Accuracy            Short_Passing \n                       0                        0                        0 \n                 Volleys                Dribbling                    Curve \n                       0                        0                        0 \n       Freekick_Accuracy              LongPassing              BallControl \n                       0                        0                        0 \n            Acceleration             Sprint_Speed                  Agility \n                       0                        0                        0 \n               Reactions                  Balance               Shot_Power \n                       0                        0                        0 \n                 Jumping                  Stamina                 Strength \n                       0                        0                        0 \n              Long_Shots               Aggression            Interceptions \n                       0                        0                        0 \n             Positioning                   Vision                Penalties \n                       0                        0                        0 \n               Composure                  Marking          Standing_Tackle \n                       0                        0                        0 \n          Sliding_Tackle        Goalkeeper_Diving      Goalkeeper_Handling \n                       0                        0                        0 \n       GoalkeeperKicking   Goalkeeper_Positioning      Goalkeeper_Reflexes \n                       0                        0                        0 \n               ST_Rating                LW_Rating                LF_Rating \n                       0                        0                        0 \n               CF_Rating                RF_Rating                RW_Rating \n                       0                        0                        0 \n              CAM_Rating                LM_Rating                CM_Rating \n                       0                        0                        0 \n               RM_Rating               LWB_Rating               CDM_Rating \n                       0                        0                        0 \n              RWB_Rating                LB_Rating                CB_Rating \n                       0                        0                        0 \n               RB_Rating                GK_Rating \n                       0                        0 \n```\n:::\n:::\n\n\nNational team position seems sparse, we'll have to get rid of club_position as well for the model fitting. We'll also get rid of *best_position* because it creates so much dummy vars. I'll analyzed it in another day...\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-7_dccba2c1e8b74fefd8b4b0e7e9dd7c50'}\n\n```{.r .cell-code}\nplayers <- select(players, -National_Team_Position, -Club_Position, -Best_Position)\n```\n:::\n\n\n# Feature selection\n\nWe'll first use elastic net regression to try and predict overall rating from the rest of the data, and also find which variables are most important.\n\n## Data splitting\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-8_942f1324938fa44738c0e27b75b96a46'}\n\n```{.r .cell-code}\nset.seed(14)\ntrain_id <- createDataPartition(y = players$Overall, p = 0.7, list = F)\n\nplayers_train <- players[train_id,]\nplayers_test <- players[-train_id,]\n```\n:::\n\n\n# Elastic net\n\n## Tuning grid for hyper-parameters\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-9_639d484dd788fe3914fc6c3ad83ee5d4'}\n\n```{.r .cell-code}\ntg <- expand.grid(alpha = c(seq(0, 1, length.out = 25)),\n                  lambda = c(2 ^ seq(10, -10, length = 100)))\n```\n:::\n\n\nSetting a relatively large range of hyper-parameters because elastic-net regression is not super expansive computationally.\n\n## Training\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-10_df67ee062c086917ff190b89eec82d88'}\n\n```{.r .cell-code}\nelastic_reg <- train(Overall ~ ., \n                    data = players_train,\n                    method = \"glmnet\",\n                    preProcess = c(\"center\", \"scale\"), # for better interpatation of coefficients\n                    tuneGrid = tg,\n                    trControl =  trainControl(method = \"cv\", number = 10)) # 10-fold Cross-Validation\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-11_0697652344d85fd44366cc96568d9eb7'}\n\n:::\n\n\n## Best hyper-parameters\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-12_40c698182be8c9f7aa81feedef5a7d45'}\n\n```{.r .cell-code}\nelastic_reg$bestTune\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     alpha       lambda\n1501 0.625 0.0009765625\n```\n:::\n:::\n\n\n## Train/CV error\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-13_16b4b166ef183cf444ca175241a44933'}\n\n```{.r .cell-code}\nplot(elastic_reg, xTrans = log, digits = 3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\nelastic_reg$results[elastic_reg$results$RMSE == min(elastic_reg$results$RMSE, na.rm = T),]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     alpha       lambda     RMSE  Rsquared     MAE     RMSESD  RsquaredSD\n1501 0.625 0.0009765625 1.601089 0.9440492 1.24766 0.04469899 0.003446449\n          MAESD\n1501 0.02690937\n```\n:::\n:::\n\n\nAll mixes of $\\alpha$ and $\\lambda$ hyper-parameters converge in the end.\n\n## Model coefficients\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-14_510bb602a5ee7129c4ca6ce47ea3ba37'}\n\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-15_90888d67a89d824c615e35929e3ad109'}\n\n```{.r .cell-code}\nelasnet_coeffs <- coef(elastic_reg$finalModel, s = elastic_reg$bestTune$lambda)\nplot(elasnet_coeffs, ylab = \"Coefficient\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\nround(elasnet_coeffs, 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n73 x 1 sparse Matrix of class \"dgCMatrix\"\n                              s1\n(Intercept)              65.9420\nPotential                 2.3510\n`Value(in_Euro)`          0.6037\nAge                       2.0174\n`Height(in_cm)`          -0.1111\n`Weight(in_kg)`           0.0979\nTotalStats               -2.7794\nBaseStats                 0.0004\n`Wage(in_Euro)`           0.2468\nRelease_Clause           -0.2689\nJoined_On                 0.0710\nPreferred_FootRight      -0.0694\nWeak_Foot_Rating         -0.0397\nSkill_Moves               0.3644\nInternational_Reputation -0.2143\nAttacking_Work_Rate      -0.0729\nDefensive_Work_Rate      -0.1001\nPace_Total                0.6887\nShooting_Total            0.4371\nPassing_Total             0.6242\nDribbling_Total           1.4907\nDefending_Total          -0.0937\nPhysicality_Total         0.9278\nCrossing                  0.3602\nFinishing                -0.4256\nHeading_Accuracy          0.8768\nShort_Passing             0.2001\nVolleys                   0.0255\nDribbling                -1.3137\nCurve                     0.0000\nFreekick_Accuracy         0.1731\nLongPassing              -0.6509\nBallControl               0.1516\nAcceleration              0.0289\nSprint_Speed             -0.1612\nAgility                  -0.1264\nReactions                 1.1084\nBalance                  -0.0032\nShot_Power               -0.0565\nJumping                   0.0664\nStamina                   0.0582\nStrength                 -0.1455\nLong_Shots               -0.3293\nAggression               -0.1703\nPositioning              -1.1545\nVision                   -0.7001\nPenalties                 0.1108\nComposure                 0.4431\nMarking                   0.6215\nStanding_Tackle           0.2082\nSliding_Tackle            0.2331\nGoalkeeper_Diving         0.1745\nGoalkeeper_Handling      -0.0091\nGoalkeeperKicking         0.0767\nGoalkeeper_Positioning   -0.0696\nGoalkeeper_Reflexes      -0.0828\nST_Rating                 2.5495\nLW_Rating                -0.0648\nLF_Rating                 0.0000\nCF_Rating                 0.0000\nRF_Rating                 0.0000\nRW_Rating                 .     \nCAM_Rating               -0.1751\nLM_Rating                 0.5492\nCM_Rating                 1.9575\nRM_Rating                 0.0129\nLWB_Rating                .     \nCDM_Rating                1.3227\nRWB_Rating                .     \nLB_Rating                -0.0021\nCB_Rating                -0.9501\nRB_Rating                 .     \nGK_Rating                 0.6368\n```\n:::\n:::\n\n\nThe intercept is quite large. Let's look at the variables in a more informative scale.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-16_0edd7d150f2d4fa35506d963f6f7d922'}\n\n```{.r .cell-code}\nplot(elasnet_coeffs[-1,], ylab = \"Coefficient\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-17_0f8c61cd595587dae63358963951bb93'}\n\n:::\n\n\n## Test error\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-18_59f5f14f266b9212c7df0e902d275bf7'}\n\n```{.r .cell-code}\nelasticreg_pred <- predict(elastic_reg, newdata = players_test) # calculating model's prediction for test set\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-19_c0b8087926f8d80d69530d1126dbfd72'}\n\n:::\n\n\n**Test error and effect size**\\\n$RMSE=1.60955711701293$\\\n$R^2=0.944839845538989$\n\nVery nice!\n\n# Boosting\n\n## Training control\n\nWe'll use adaptive cross-validation in order to make the hyper-parameter search more efficient.\\\nFor further explanation on implementation in `R` [see](https://topepo.github.io/caret/adaptive-resampling.html). For further reading on theory [see](https://arxiv.org/abs/1405.6974).\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-20_60ea6eb8fbfba253a1d09efebab9d19a'}\n\n```{.r .cell-code}\ntr <- trainControl(method = \"adaptive_cv\",\n                   number = 10, repeats = 10,\n                   adaptive = list(min = 5, alpha = 0.05, \n                                   method = \"BT\", complete = TRUE),\n                   search = \"random\")\n```\n:::\n\n\n## Training\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-21_ae0e10d3fa931f41cd10bf28d6bef057'}\n\n```{.r .cell-code}\nset.seed(14)\nboost_model <- train(Overall ~ ., \n                   data = players_train,\n                   method = \"gbm\",\n                   trControl = tr, # No explicit tuning grid is needed\n                   verbose = T)\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-22_0cceb1eee9d7424f2907032cb210a60f'}\n\n:::\n\n\n## Train/CV error\n\nGetting the results of the best tuning parameters found.\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-23_000cc66608c73bcd696fba7eb3781e79'}\n\n```{.r .cell-code}\nboost_model$results[boost_model$results$RMSE == min(boost_model$results$RMSE, na.rm = T),5:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       RMSE  Rsquared       MAE      RMSESD   RsquaredSD       MAESD\n2 0.7146858 0.9893686 0.5457707 0.005980442 0.0002966158 0.002603466\n```\n:::\n:::\n\n\nSeems quite optimized, but is it overfitted?\n\n## Test error\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-24_a27bec5025ebf29120127af1cbbb574b'}\n\n```{.r .cell-code}\nboost_pred <- predict(boost_model, players_test)\n```\n:::\n\n::: {.cell hash='index_cache/html/unnamed-chunk-25_fde746f6ca010f65d2916d9487d16f1b'}\n\n:::\n\n\n**Test error and effect size**\\\n$RMSE=0.700272523649518$\\\n$R^2=0.989645490170188$\n\nVery Very nice!\n\n## Variable importance\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-26_6d969430b687967ab709185b4fa2b68d'}\n\n```{.r .cell-code}\nvarimp <- caret::varImp(boost_model, scale = T)\n\nvarimp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ngbm variable importance\n\n  only 20 most important variables shown (out of 72)\n\n                        Overall\n`Value(in_Euro)`       100.0000\nReactions               50.2939\nBaseStats               16.4047\nAge                      7.5742\n`Wage(in_Euro)`          3.8700\nPotential                3.6002\nCB_Rating                2.3274\nDefending_Total          1.0533\nGoalkeeper_Positioning   0.6619\nCrossing                 0.3162\nTotalStats               0.2916\nShooting_Total           0.2559\nStrength                 0.2359\nPositioning              0.2113\nStanding_Tackle          0.1991\nLF_Rating                0.1927\nRelease_Clause           0.1814\nDribbling_Total          0.1650\nLB_Rating                0.1578\nHeading_Accuracy         0.1497\n```\n:::\n:::\n\n\n### Plotting variable importance\n\n\n::: {.cell hash='index_cache/html/unnamed-chunk-27_c822636184675288156bb1f08f11ad79'}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the plot's code\"}\n# data preparation\nvarimp$importance %>%\n  rownames_to_column(var = \"Feature\") %>%\n  dplyr::rename(Importance = Overall) %>%\n  filter(Importance != 0) %>% # Only features that have an above 0 importance\n  \n  # Plotting\n  ggplot(aes(x = reorder(Feature, -Importance), y = Importance)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip(ylim = c(0, 100)) +\n  scale_y_continuous(limits = c(0,100), expand = c(0, 0)) +\n  labs(x = \"Feature\", y = \"Importance\", title = \"Variable importance in boosted model\", caption = \"Tomer Zipori | FIFA 23 Player Research by Babatunde Zenith | Kaggle\") +\n  theme_classic() +\n  theme(axis.text.y = element_text(size = 7),\n        plot.title = element_text(size = 16, hjust = 0.5),\n        plot.margin = unit(c(1,1,1,1), \"cm\"),\n        plot.caption = element_text(size = 6, hjust = 0.5, vjust = -5))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nPlayer value is the strongest predictor by far, with a few interesting ones right behind it (CB_rating?).\n\n# Conclusion\n\nBoth methods supplied outstanding results with over 94% and 99% explained variance in rating. Not so surprisingly Player's value is strongly linked with their overall FIFA rating. A few notable findings are the importance of *Reactions*, *CB_rating* and *Defending_total*. Overall, Defensive ability seems to be quite an important predictor of Player's rating.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}