{
  "hash": "0d77cd3f72eaee07c6f80e323d51a3cc",
  "result": {
    "markdown": "---\ntitle: \"Cage-free vs. caged hens in the US\"\nauthor: \"Tomer Zipori\"\ndate: 2023-04-12\ncategories: [code, visualization, ggplot2, tidytuesday]\nimage: \"eggs.png\"\nexecute: \n  warning: false\n  message: false\nformat:\n  html:\n    theme: darkly\n    toc: true\n    toc-depth: 2\n    toc-location: right\neditor: visual\n---\n\n\n# Background\nSome time ago, when the fall semester began I've enrolled on a course called *Data science lab* as part of the 'Data Science for the Social Sciences' program. One of the assignments was to make some `TidyTuesday` contribution and present it in class. So this is my submission and what I consider as my first respectable attempts at visualizing data.\n\n# The Data\n\n##### From the Github [repo](https://github.com/tomerzipori/tidytuesday/tree/master/data/2023/2023-04-11):\n*The data this week comes from [The Humane League's US Egg Production* *dataset](https://thehumaneleague.org/article/E008R01-us-egg-production-data) by [Samara Mendez](https://samaramendez.github.io/). Dataset and code is available for this project on OSF at [US Egg Production Data Set](https://osf.io/z2gxn/).*\n\n*This dataset tracks the supply of cage-free eggs in the United States from December 2007 to February 2021. For TidyTuesday we've used data through February 2021, but the full dataset, with data through the present, is available in the [OSF project](https://osf.io/z2gxn/).*\n\nLet's start!\n\n# Setup\n## Libraries\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidytuesdayR) # for easy data loading\nlibrary(tidyverse)    # for data pre-processing and wrangling\nlibrary(lubridate)    # makes dealing with date format much easier\nlibrary(showtext)     # fonts\n```\n:::\n\n\n## Loading fonts\n`showtext` is an awesome package that allows to load installed fonts into `R` and use it in `ggplot2` plots (for example). For a really helpful video that I used see this [video](https://www.youtube.com/watch?v=kyOCNPuQzog&t=1010s) from the Riffomonas Project.\n\n::: {.cell}\n\n```{.r .cell-code}\nfont_add(family = \"Stencil\", regular = \"STENCIL.TTF\")\nshowtext_auto()\n```\n:::\n\n\n# Loading data\n\n::: {.cell}\n\n```{.r .cell-code}\neggproduction  <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-04-11/egg-production.csv')\n\ncagefreepercentages <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-04-11/cage-free-percentages.csv')\n```\n:::\n\n\n## Taking a peak\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(eggproduction)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  observed_month prod_type     prod_process   n_hens     n_eggs source          \n  <date>         <chr>         <chr>           <dbl>      <dbl> <chr>           \n1 2016-07-31     hatching eggs all          57975000 1147000000 ChicEggs-09-23-…\n2 2016-08-31     hatching eggs all          57595000 1142700000 ChicEggs-10-21-…\n3 2016-09-30     hatching eggs all          57161000 1093300000 ChicEggs-11-22-…\n4 2016-10-31     hatching eggs all          56857000 1126700000 ChicEggs-12-23-…\n5 2016-11-30     hatching eggs all          57116000 1096600000 ChicEggs-01-24-…\n6 2016-12-31     hatching eggs all          57750000 1132900000 ChicEggs-02-28-…\n```\n:::\n:::\n\n\n`eggproduction` holds monthly data about number of hens and produced eggs in the US. `prod_type` specifies the type of egg produced, it has 2 levels:\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(eggproduction$prod_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hatching eggs\" \"table eggs\"   \n```\n:::\n:::\n\nFor the current mini-project, I'll stay with \"table eggs\" only.\n\nThe variable `prod_process` specifies the type of housing of the egg-producing hens. It has 3 levels:\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(eggproduction$prod_process)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"all\"                     \"cage-free (non-organic)\"\n[3] \"cage-free (organic)\"    \n```\n:::\n:::\n\nI'll leave data of `all` hens for now.\n\n### Pre-processing 1\nFiltering out irrelevant data and renaming some variables.\n\n::: {.cell}\n\n```{.r .cell-code}\negg_clean <- eggproduction %>%\n  filter(prod_type != \"hatching eggs\" & prod_process == \"all\") %>% # Leave only eggs meant for eating and general data\n  select(-source, -prod_type, -prod_process, n_hens_all = n_hens, n_eggs_all = n_eggs) # Irrelevant columns\n```\n:::\n\n\n### Taking a peak 2\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(cagefreepercentages)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  observed_month percent_hens percent_eggs source                             \n  <date>                <dbl>        <dbl> <chr>                              \n1 2007-12-31              3.2           NA Egg-Markets-Overview-2019-10-19.pdf\n2 2008-12-31              3.5           NA Egg-Markets-Overview-2019-10-19.pdf\n3 2009-12-31              3.6           NA Egg-Markets-Overview-2019-10-19.pdf\n4 2010-12-31              4.4           NA Egg-Markets-Overview-2019-10-19.pdf\n5 2011-12-31              5.4           NA Egg-Markets-Overview-2019-10-19.pdf\n6 2012-12-31              6             NA Egg-Markets-Overview-2019-10-19.pdf\n```\n:::\n:::\n\n\nThis data-frame also holds monthly data. The variable `percent_hens` specifies *observed or computed percentage of cage-free hens relative to all table-egg-laying hens* (from the Github repo). We'll select these variables and use them to merge with the first data-frame.\n\n::: {.cell}\n\n```{.r .cell-code}\negg_clean2 <- cagefreepercentages %>%\n  drop_na(percent_eggs) %>%                                                # droping rows with missing percent_eggs data\n  select(-source, -percent_eggs, cagefree_percent_hens = percent_hens) %>% # Irrelevant\\to many NA's columns + renaming\n  inner_join(egg_clean, by = \"observed_month\", multiple = \"all\") %>%       # joining with the first data-frame\n  mutate(Cagefree = (cagefree_percent_hens * n_hens_all) / 100) %>%        # calculating number of cage-free hens\n  mutate(Traditional = n_hens_all - Cagefree) %>%                          # calculating number of traditional housing hens\n  select(observed_month, Cagefree, Traditional) %>%\n  pivot_longer(cols = c(\"Cagefree\", \"Traditional\"), names_to = \"housing\", values_to = \"n_hens\")\n```\n:::\n\n\n# Plotting\n## Gameplan\nFew hours deep, I've decided it would be interesting to see the change in number of cage-free hens compared to caged hens during the time period we have data about. Because I wanted to plot only certain points of data along the time axis, I needed to create a subset of the big data-frame that holds the data for the points I wanted to plot.\n\n### Identitfying the dates of interest\nFirst thing, I found 6 dates that are equally spaced between the start and end points. The repetitive code below is quite ugly, and `lubridate` probably has a nice and elegant solution, I didn't want to spend to much time on it.\n\n::: {.cell}\n\n```{.r .cell-code}\ndates_for_plot <- seq.Date(egg_clean2$observed_month[1], egg_clean2$observed_month[nrow(egg_clean2)], length.out = 6)\ndates_for_plot[2] <- as.Date(\"2017-07-31\")\ndates_for_plot[3] <- as.Date(\"2018-05-31\")\ndates_for_plot[4] <- as.Date(\"2019-04-30\")\ndates_for_plot[5] <- as.Date(\"2020-03-31\")\n```\n:::\n\n\n### Creating the subset\nI will use this subset in order to plot the 6 points on the general data. I will only need to specify `data = subset_for_points` in the relevant `geom` object.\n\n::: {.cell}\n\n```{.r .cell-code}\nsubset_for_points <- egg_clean2 %>%\n  filter((housing == \"Cagefree\" & observed_month %in% dates_for_plot) |\n           (housing == \"Traditional\" & (observed_month == dates_for_plot[1] | observed_month == dates_for_plot[6]))) %>%\n  inner_join(select(egg_clean, observed_month, n_hens = n_hens_all), by = \"observed_month\") %>%\n  mutate(n_hens = case_when(housing == \"Cagefree\" ~ n_hens.x,\n                            housing == \"Traditional\" ~ n_hens.y)) %>%\n  select(-n_hens.x, -n_hens.y)\n```\n:::\n\n\n## Actually plotting\nI went with a simple stacked density plot. Watch how the number of cage-free goes from \n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nplot <- egg_clean2 %>%\n  ggplot(aes(x = observed_month, y = n_hens/1000000, fill = factor(housing, levels = c(\"Traditional\", \"Cagefree\")),\n             color = factor(housing, levels = c(\"Traditional\", \"Cagefree\")),\n             label = n_hens/1000000)) +\n  geom_density(position = 'stack', stat = 'identity') +\n  geom_point(data = subset_for_points) +\n  geom_text(data = subset_for_points, aes(label = round(n_hens/1000000)), hjust = 0.5, vjust = -1, size = 6, family = \"serif\") +\n  scale_fill_manual(values = c(\"#ffefd5\", \"#e1bf92\")) +\n  scale_color_manual(values = c(\"#e1bf92\", \"#83502e\")) +\n  annotate(geom = \"text\", x = as_date(\"2019/1/1\"), y = 30, label = \"Cage-Free\", color = \"#808080\",\n           family = \"Stencil\", angle = 2.5, size = 15, alpha = 0.5) +\n  annotate(geom = \"text\", x = as_date(\"2019/1/1\"), y = 190, label = \"Caged\", color = \"#808080\",\n           family = \"Stencil\", angle = 2.5, size = 15, alpha = 0.5) +\n  scale_x_date(breaks = dates_for_plot) +\n  xlab(\"\") +\n  ylab(\"Number of egg-producing hens (millions)\") +\n  labs(fill = \"Housing\", title = \"Number of Cage-free hens in the US is constatly rising\",\n       subtitle = \"Relative number of Cage-free hens in the US in the years 2016-2021\",\n       caption = \"Tomer Zipori | #TidyTuesday | Source: The Humane League's US Egg Production dataset\") +\n  guides(color = \"none\", fill = \"none\") +\n  theme_classic() +\n  theme(axis.title = element_text(size = 16, color = \"#83502e\"),\n        axis.text.x = element_text(size = 13, color = \"#83502e\"),\n        axis.text.y = element_text(size = 13, color = \"#83502e\"),\n        plot.title = element_text(hjust = 0.5, size = 18, color = \"#83502e\"),\n        plot.subtitle = element_text(hjust = 0.5, size = 13, family = \"serif\", color = \"#83502e\"),\n        plot.caption = element_text(family = \"serif\", color = \"#83502e\"),\n        plot.margin = margin(0.5,0.5,0.5,0.7, \"cm\"),\n        plot.background = element_rect(fill = \"#fffaf0\"),\n        panel.background = element_rect(fill = \"#fffaf0\"))\nplot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=800 height=501}\n:::\n:::\n\n\n# Conclusion\nThere is a steady and relative fast growth in cage-free hens in the US, compared with caged-housed hens. Nice.\nAs I said in the beginning. this is my first `TidyTuesday` contribution, and the first data visualization attempts that I felt worthy of posting lol. I learned a few tricks along the way for example:\n      1. lubridate's *date* format is super nice to work with. It can be seq't along and do all kind of efficient things for dealing with timely data.\n      2. Referencing more then one data-frame in a single `ggplot()`, Seems obvious, but I didn't think about this solution to plotting just some of the data until this mini-project.\n      3. Many-many things about aesthetics of `ggplot2`, like the `annotate()` and `labs()` functions and arguments.\n\n\n\n\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}